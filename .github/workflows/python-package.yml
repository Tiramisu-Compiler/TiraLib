# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on: [pull_request]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff
    - name: Check formating with ruff
      run: |
        ruff format --check

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff
    - name: Lint with ruff
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ruff check
  
  build:
    runs-on: ubuntu-latest
    container:
      image: skourta/tiramisu:latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff pytest pytest-cov coverage
        if [ -f requirements.txt ]; then python -m pip install --user -r requirements.txt; fi

    - name: Install TiraLibCPP
      run: |
        apt install -y sqlite3 libsqlite3-dev zlib1g-dev
        git clone https://github.com/skourta/TiraLibCpp.git
        cd TiraLibCpp
        cmake . -B build -DTIRAMISU_INSTALL=${INSTALL_PATH}
        cmake --build build
        cmake --install build --prefix ${INSTALL_PATH}

    - name: Create config.yaml
      run: |
        mkdir workspace
        echo "env_vars:" >> config.yaml
        echo "  CXX: g++" >> config.yaml
        echo "  CC: cc" >> config.yaml
        echo "dependencies:" >> config.yaml
        echo "  includes:" >> config.yaml
        echo "    - ${INSTALL_PATH}/include" >> config.yaml
        echo "  libs:" >> config.yaml
        echo "    - ${INSTALL_PATH}/lib" >> config.yaml

    - name: Test with pytest
      run: |
        pytest
